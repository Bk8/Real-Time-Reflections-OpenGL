#pragma once

#include <string> //For class hierarchy

//Objects
#include "Objects/Object.h"
#include "Objects/RenderObject.h"
#include "Objects/Lights/Light.h"
#include "Objects/Lights/ShadowLight.h"
#include "Objects/Cameras/Camera.h"
#include "Objects/Cameras/Camera1stPerson.h"
#include "Objects/Cameras/Camera3rdPerson.h"
#include "Physics/PhysicsObject.h"

//Programs
#include "OpenGL/Programs/GLProgram_DeferredGeometryPass.h"
#include "OpenGL/Programs/GLProgram_DeferredLightingPass.h"
#include "OpenGL/Programs/GLProgram_Reflection.h"
#include "OpenGL/Programs/GLProgram_Refraction.h"
#include "OpenGL/Programs/GLProgram_Passthrough.h"
#include "OpenGL/Programs/GLProgram_ShadowMap.h"

#include "Utils/Singleton.h" //For accessing Factory
#include "Utils/Factory.h" //For registration
#include "Utils/tree.h" //For class type hierarchy

/*-----------------------------------------------------------------------------
ClassRegister - The place to enter class data manually. This class could easily 
be autogenerated. Uses: Factory class setup
-----------------------------------------------------------------------------*/

class ClassRegister
{
public:
	ClassRegister()
	{
		/*-------------------------------------------
		//// Factory ////////////////////////////////
		-------------------------------------------*/
		Factory* factory = Singleton<Factory>::Instance();

		//Objects
		factory->register_class<Object>(Object::className);
		factory->register_class<RenderObject>(RenderObject::className);
		factory->register_class<Light>(Light::className);
		factory->register_class<ShadowLight>(ShadowLight::className);
		factory->register_class<Camera1stPerson>(Camera1stPerson::className);
		factory->register_class<Camera3rdPerson>(Camera3rdPerson::className);
		factory->register_class<PhysicsObject>(PhysicsObject::className);

		//Programs
		factory->register_class<GLProgram_DeferredGeometryPass>("GLProgram_DeferredGeometryPass");
		factory->register_class<GLProgram_DeferredLightingPass>("GLProgram_DeferredLightingPass");
		factory->register_class<GLProgram_Reflection>("GLProgram_Reflection");
		factory->register_class<GLProgram_Refraction>("GLProgram_Refraction");
		factory->register_class<GLProgram_Passthrough>("GLProgram_Passthrough");
		factory->register_class<GLProgram_ShadowMap>("GLProgram_ShadowMap");

		/*-------------------------------------------
		//// Class Hierarchy ////////////////////////
		-------------------------------------------*/
		tree<std::string>::iterator object, renderObject, light, shadowLight,
			                        physicsObject, camera, camera1stPerson, camera3rdPerson;
		object =          Object::classHierarchy.set_head(Object::className);
		renderObject =    Object::classHierarchy.append_child(object,RenderObject::className);
		light =           Object::classHierarchy.append_child(object,Light::className);
		shadowLight =     Object::classHierarchy.append_child(light,ShadowLight::className);
		physicsObject =   Object::classHierarchy.append_child(object,PhysicsObject::className);
		camera =          Object::classHierarchy.append_child(object,Camera::className);
		camera1stPerson = Object::classHierarchy.append_child(camera,Camera1stPerson::className);
		camera3rdPerson = Object::classHierarchy.append_child(camera,Camera3rdPerson::className);
	}
	~ClassRegister(){}
};